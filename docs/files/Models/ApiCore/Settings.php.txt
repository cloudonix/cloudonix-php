<?php
/**
 * cloudonix-php - A PHP Class for interfacing with the Cloudonix API.Core Interface
 *
 * Cloudonix API.Core provides its users with a programmable API to manage and control their Cloudonix platform
 * account, domains, applications, trunks, DNIDs, subscribers and more. The class library provides its entire
 * functionality via models, located under the /src/Models/ApiCore/ directory.
 *
 * @author: Nir Simionovich
 * @license: LGPL 3.0 (https://www.gnu.org/licenses/lgpl-3.0.en.html)
 * @copyright: Cloudonix, Inc. May 2019. All Rights Reserved.
 * @site: https://cloudonix.io
 * @package Cloudonix\ApiCore
 * @filesource
 */

namespace Cloudonix\ApiCore;

/**
 * Class Settings - Cloudonix Settings query class
 *
 * @example src/samples/sample_apicoreclient.php A basic usage example of ApiCoreClient
 * @example src/samples/sample_apicoreclient_output.txt Sample output from sample_apicoreclient.php
 * @package Cloudonix\Common
 */
class Settings
{
	/** @var ApiCoreClient $apiClientConnector The previously initiated ApiCoreClient object */
	public $apiClientConnector = null;

	/** @var integer $tenantId The tenant ID initiating the API, for system privilage - null */
	public $tenantId = null;

	/**
	 * Settings constructor.
	 * @param ApiCoreClient $connector Cloudonix ApiCoreClient object
	 */
	public function __construct($connector = null)
	{
		try {

			if ($connector == null) {
				throw new \Exception("Input values can not be null");
			}

			$this->apiClientConnector = $connector->apiClientConnector;
			$this->tenantId = $connector->tenantId;

		} catch (\Exception $e) {
			die("Exception Raised at " . $e->getFile() . " Line: " . $e->getLine() . " Message: [" . $e->getMessage() . "]");
		}
	}

	/**
	 * Settings destructor
	 */
	public function __destruct()
	{
		// TODO: Implement __destruct() method.
	}

	/**
	 * Get the current data version of Cloudonix.io platform.
	 * @return mixed
	 */
	public function getDataVersion()
	{
		try {

			if ($this->apiClientConnector == null) {
				throw new \Exception("Cloudonix Client had not been initialised properly");
			}

			$request_params = [
				"headers" => [
					"Content-Type" => "application/json"
				]
			];

			$request_result = $this->apiClientConnector->request('GET', '/settings/data-version');

			return json_decode($request_result->getBody());

		} catch (\Exception $e) {
			die("Exception Raised at " . $e->getFile() . " Line: " . $e->getLine() . " Message: [" . $e->getMessage() . "]");
		}
	}

	/**
	 * Get the status of the DLC mechanism - Device Licensing Controller
	 * @return mixed
	 */
	public function getDlcEnabled()
	{
		try {

			if ($this->apiClientConnector == null) {
				throw new \Exception("Cloudonix Client had not been initialised properly");
			}

			$request_params = [
				"headers" => [
					"Content-Type" => "application/json"
				]
			];

			$request_result = $this->apiClientConnector->request('GET', '/settings/dlc-enabled');

			return json_decode($request_result->getBody());

		} catch (\Exception $e) {
			die("Exception Raised at " . $e->getFile() . " Line: " . $e->getLine() . " Message: [" . $e->getMessage() . "]");
		}
	}
}
