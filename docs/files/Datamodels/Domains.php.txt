<?php
/**
 *  ██████╗██╗      ██████╗ ██╗   ██╗██████╗  ██████╗ ███╗   ██╗██╗██╗  ██╗
 * ██╔════╝██║     ██╔═══██╗██║   ██║██╔══██╗██╔═══██╗████╗  ██║██║╚██╗██╔╝
 * ██║     ██║     ██║   ██║██║   ██║██║  ██║██║   ██║██╔██╗ ██║██║ ╚███╔╝
 * ██║     ██║     ██║   ██║██║   ██║██║  ██║██║   ██║██║╚██╗██║██║ ██╔██╗
 * ╚██████╗███████╗╚██████╔╝╚██████╔╝██████╔╝╚██████╔╝██║ ╚████║██║██╔╝ ██╗
 *  ╚═════╝╚══════╝ ╚═════╝  ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝╚═╝  ╚═╝
 *
 * Project: cloudonix-php | Domains.php
 * Creator: nirs | 2019-06-27
 */

namespace Cloudonix\Datamodels;

use Cloudonix\Client;
use Cloudonix\DatamodelConnector;
use Cloudonix\Exceptions\CloudonixGeneralException;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\ServerException;
use Noodlehaus\Exception;

class Domains extends Client
{
	/** @var string A Cloudonix Domain API key */
	public $apikey;

	/** @var int A Cloudonix Domain ID (obtained via getSelf() function */
	public $id = 0;

	/** @var string A Cloudonix Domain Name (obtained via getSelf() function */
	public $apikeyName = null;

	public function __construct($apikey, $clientHandler)
	{
		if (null == $apikey)
			throw new CloudonixGeneralException('API Key Exception raised', 500, null);

		$this->apikey = $apikey;

		parent::__construct($apikey, $clientHandler);
	}

	/**
	 * Get Domain self related information, based upon the API key provided in the constructor. Store data in Cache
	 * for future usage.
	 *
	 * @return object API key self information
	 */
	public function getSelf() {
		try {

			$mySelfKeyResult = $this->httpConnector->request('GET',
				'/keys/self',
				['headers' => $this->httpHeaders]
			);

			$myDomainData = json_decode((string)$mySelfKeyResult->getBody());

			/* Store Domain Information to Cache */
			$this->handler->cacheHandler->write($this->apikey . '-cxDomainId', $myDomainData->domainId);
			$this->handler->cacheHandler->write($this->apikey . '-cxDomainName', $myDomainData->name);

			$this->apikeyName = $myDomainData->name;
			$this->id = $myDomainData->domainId;

		} catch (ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (ClientException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Validate our the existance of a domain, either in the object or the cache storage.
	 *
	 * @return bool False on failure
	 * @throws CloudonixGeneralException
	 */
	public function validateSelf() {
		try {

			if ((null == $this->name) || (!$this->name)) {
				$this->name = $this->handler->cacheHandler->read($this->apikey . '-cxDomainName');
				if ((!$this->name) || (!$this->name))
					throw new CloudonixGeneralException('Domain name not loaded or cached', 500, null);
			}

			if ((null == $this->id) || (!$this->id)) {
				$this->id = $this->handler->cacheHandler->read($this->apikey . '-cxDomainId');
				if ((!$this->id) || (!$this->id))
					throw new CloudonixGeneralException('Domain ID not loaded or cached', 500, null);
			}

			return true;

		} catch (Exception $e) {
			return false;
		}
	}

	/**
	 * Get a list of the current assinged API keys, associated with the domain (as designated by the API key)
	 * @return Object
	 */
	public function getKeys()
	{
		try {

			if (!$this->validateSelf())
				throw new Exception('Tenant name or Tenant ID not loaded or cached', 500);

			$myTenantApiKeys = $this->httpConnector->request('GET',
				'/tenants/' . $this->clientTenantId . '/domains/' . $this->id . '/keys',
				['headers' => $this->httpHeaders]
			);

			return json_decode((string)$myTenantApiKeys->getBody());

		} catch (ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (ClientException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (CloudonixGeneralException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}
}
