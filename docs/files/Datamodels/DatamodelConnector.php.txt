<?php
/**
 *  ██████╗██╗      ██████╗ ██╗   ██╗██████╗  ██████╗ ███╗   ██╗██╗██╗  ██╗
 * ██╔════╝██║     ██╔═══██╗██║   ██║██╔══██╗██╔═══██╗████╗  ██║██║╚██╗██╔╝
 * ██║     ██║     ██║   ██║██║   ██║██║  ██║██║   ██║██╔██╗ ██║██║ ╚███╔╝
 * ██║     ██║     ██║   ██║██║   ██║██║  ██║██║   ██║██║╚██╗██║██║ ██╔██╗
 * ╚██████╗███████╗╚██████╔╝╚██████╔╝██████╔╝╚██████╔╝██║ ╚████║██║██╔╝ ██╗
 *  ╚═════╝╚══════╝ ╚═════╝  ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝╚═╝  ╚═╝
 *
 * Project: cloudonix-php | Connector.php
 * Creator: nirs | 2019-06-27
 */

namespace Cloudonix;

use Cloudonix\Exceptions\CloudonixException;
use Cloudonix\Exceptions\CloudonixApikeyException;
use Cloudonix\Exceptions\CloudonixGeneralException;
use GuzzleHttp\Client;
use Noodlehaus\Exception;

abstract class DatamodelConnector
{
	/** @var object Previously initiated Cloudonix\Client Object */
	public $clientHandler;

	/** @var object Guzzle HTTP Client Connector */
	public $clientHttpConnector;

	/** @var array HTTP Headers to be used with all Guzzle HTTP Client requests */
	public $clientHttpConnectorHeaders;

	/** @var string A Cloudonix Tenant API key */
	public $clientApikey;

	/** @var string A Cloudonix Tenant Name (obtained via getSelf() function */
	public $clientTenantName = null;

	/** @var int A Cloudonix Tenant ID (obtained via getSelf() function */
	public $clientTenantId = 0;

	/**
	 * Connector constructor.
	 * @param string $apikey A Cloudonix assigned Tenant API Key
	 * @param bool $clientHandler A Cloudonix Client Object, generated by the Cloudonix\Client Class.
	 * @throws CloudonixGeneralException
	 * @throws CloudonixApikeyException
	 */
	public function __construct($apikey = null, $clientHandler = false)
	{
		try {
			if (null == $apikey)
				throw new CloudonixApikeyException('API Key Exception raised', 500, null);

			$this->clientApikey = $apikey;

			$this->clientHandler = $clientHandler;
			if (!$this->clientHandler)
				throw new CloudonixGeneralException('General Exception raised', 500, null);

			$this->init();
			$this->getSelf();

		} catch (CloudonixApikeyException $e) {
			die('Cloudonix apikey must be provided');
		} catch (CloudonixException $e) {
			die('Client Handler not provided');
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Initialise the Guzzle HTTP Client
	 */
	protected function init() {
		$this->clientHttpConnector = new Client([
			'base_uri' => $this->clientHandler->clientHttpRequestEndpoint,
			'timeout' => 2.0,
		]);
		$this->clientHttpConnectorHeaders = [
			'Authorization' => 'Bearer ' . $this->clientApikey,
			'Content-Type' => 'application/json',
			'User-Agent' => $this->clientHandler->clientIdentification
		];
	}

	abstract function getSelf();
}
