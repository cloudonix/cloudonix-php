<?php
/**
 *  ██████╗██╗      ██████╗ ██╗   ██╗██████╗  ██████╗ ███╗   ██╗██╗██╗  ██╗
 * ██╔════╝██║     ██╔═══██╗██║   ██║██╔══██╗██╔═══██╗████╗  ██║██║╚██╗██╔╝
 * ██║     ██║     ██║   ██║██║   ██║██║  ██║██║   ██║██╔██╗ ██║██║ ╚███╔╝
 * ██║     ██║     ██║   ██║██║   ██║██║  ██║██║   ██║██║╚██╗██║██║ ██╔██╗
 * ╚██████╗███████╗╚██████╔╝╚██████╔╝██████╔╝╚██████╔╝██║ ╚████║██║██╔╝ ██╗
 *  ╚═════╝╚══════╝ ╚═════╝  ╚═════╝ ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═╝╚═╝  ╚═╝
 *
 * Project: cloudonix-php | Connector.php
 * Creator: nirs | 2019-06-26
 */

/**
 * @description Cloudonix Tenants Command and Control REST API Client
 */
namespace Cloudonix\Tenants;

use Cloudonix\Exceptions\CloudonixException;
use Cloudonix\Exceptions\CloudonixApikeyException;
use Noodlehaus\Exception;

/**
 * Cloudonix Tenants Control API Connector Class
 *
 * @package Cloudonix\Tenants
 */
class Connector
{

	/** @var object Previously initiated Cloudonix\Client Object */
	public $clientHandler;

	/** @var object Guzzle HTTP Client Connector */
	public $clientHttpConnector;

	/** @var array HTTP Headers to be used with all Guzzle HTTP Client requests */
	public $clientHttpConnectorHeaders;

	/** @var string A Cloudonix Tenant API key */
	public $clientApikey;

	/** @var string A Cloudonix Tenant Name (obtained via getSelf() function */
	public $clientTenantName = null;

	/** @var int A Cloudonix Tenant ID (obtained via getSelf() function */
	public $clientTenantId = 0;

	/**
	 * Connector constructor.
	 * @param string $apikey A Cloudonix assigned Tenant API Key
	 * @param bool $clientHandler A Cloudonix Client Object, generated by the Cloudonix\Client Class.
	 */
	public function __construct($apikey = null, $clientHandler = false)
	{
		try {
			if ($apikey == null)
				throw new CloudonixApikeyException('API Key Exception raised');

			$this->clientApikey = $apikey;

			$this->clientHandler = $clientHandler;
			if (!$this->clientHandler)
				throw new CloudonixException('General Exception raised');

			$this->init();
			$this->getSelf();

		} catch (CloudonixApikeyException $e) {
			die('Cloudonix apikey must be provided');
		} catch (CloudonixException $e) {
			die('Client Handler not provided');
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Class Destructor
	 */
	public function __destruct()
	{
		// TODO: Implement __destruct() method.
	}

	/**
	 * Initialise the Guzzle HTTP Client
	 */
	private function init() {
		$this->clientHttpConnector = new \GuzzleHttp\Client([
			'base_uri' => $this->clientHandler->clientHttpRequestEndpoint,
			'timeout' => 2.0,
		]);
		$this->clientHttpConnectorHeaders = [
			'Authorization' => 'Bearer ' . $this->clientApikey,
			'Content-Type' => 'application/json',
			'User-Agent' => $this->clientHandler->clientIdentification
		];
	}

	/**
	 * Get Tenant self related information, based upon the API key provided in the constructor. Store data in Cache
	 * for future usage.
	 */
	private function getSelf() {
		try {

			$mySelfKeyResult = $this->clientHttpConnector->request('GET',
				'/keys/self',
				['headers' => $this->clientHttpConnectorHeaders]
			);

			$myTenantData = json_decode((string)$mySelfKeyResult->getBody());

			/* Store Tenant Information to Cache */
			$this->clientHandler->clientCacheHandler->write($this->clientApikey . '-cxTenantId', $myTenantData->tenantId);
			$this->clientHandler->clientCacheHandler->write($this->clientApikey . '-cxTenantName', $myTenantData->name);
			$this->clientHandler->clientCacheHandler->write($this->clientApikey . '-cxTenantApikey', $myTenantData->keyId);
			$this->clientHandler->clientCacheHandler->write($this->clientApikey . '-cxTenantApiSecret', $myTenantData->secret);

			$this->clientTenantName = $myTenantData->name;
			$this->clientTenantId = $myTenantData->tenantId;

		} catch (\GuzzleHttp\Exception\ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Validate our the existance of a tenant name and ID, either in the object or the cache storage.
	 *
	 * @return bool False on failure
	 */
	private function validateSelf() {

		try {

			if (($this->clientTenantName == null) || (!strlen($this->clientTenantName))) {
				$this->clientTenantName = $this->clientHandler->clientCacheHandler->read($this->clientApikey . '-cxTenantName');
				if ((!$this->clientTenantName) || (!strlen($this->clientTenantName)))
					throw new Exception('Tenant name not loaded or cached', 500);
			}

			if (($this->clientTenantId == null) || (!$this->clientTenantId)) {
				$this->clientTenantId = $this->clientHandler->clientCacheHandler->read($this->clientApikey . '-cxTenantId');
				if ((!$this->clientTenantId) || (!$this->clientTenantId))
					throw new Exception('Tenant name not loaded or cached', 500);
			}

			return true;

		} catch (Exception $e) {
			return false;
		}
	}
	/**
	 * Get a list of the current assinged API keys, associated with the tenant (as designated by the API key)
	 * @return Object
	 */
	public function getKeys() {
		try {

			if (!$this->validateSelf())
				throw new Exception('Tenant name or Tenant ID not loaded or cached', 500);

			$myTenantApiKeys = $this->clientHttpConnector->request('GET',
				'/tenants/' . $this->clientTenantName . '/keys',
				['headers' => $this->clientHttpConnectorHeaders]
			);

			return json_decode((string)$myTenantApiKeys->getBody());

		} catch (\GuzzleHttp\Exception\ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Set the name of a specific API key, designated by $apikeyId
	 *
	 * @param bool|int $apikeyId An API key ID
	 * @param null $name The name to assign to the API key ID
	 * @return object
	 */
	public function setApikeyName($apikeyId = false, $name = null) {
		try {

			if (!$apikeyId)
				throw new Exception('apikey ID must be provided', 500);

			if (($name == null) || !strlen($name))
				throw new Exception('name must be provided and can not be an empty string', 500);

			if (!$this->validateSelf())
				throw new Exception('Tenant name or Tenant ID not loaded or cached', 500);

			$myTenantApiKeys = $this->clientHttpConnector->request('PUT',
				'/tenants/' . $this->clientTenantName . '/keys',
				[
					'headers' => $this->clientHttpConnectorHeaders,
					'json' => [ 'name' => $name ]

				]
			);

			return json_decode((string)$myTenantApiKeys->getBody());

		} catch (\GuzzleHttp\Exception\ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Set the API key, designated by $apikeyId as disabled
	 *
	 * @param bool|int $apikeyId The API key ID to disable
	 * @return object
	 */
	public function disableApikey($apikeyId = false) {
		return $this->setApikeyActive($apikeyId, false);
	}

	/**
	 * Set the API key, designated by $apikeyId as enabled
	 *
	 * @param bool|int $apikeyId The API key ID to enable
	 * @return object
	 */
	public function enableApikey($apikeyId = false) {
		return $this->setApikeyActive($apikeyId, true);
	}

	/**
	 * Set the API key, designated by $apikeyId as enabled or disabled
	 * @param bool|int $apikeyId The API key ID to enable
	 * @param bool $active TRUE for enabled, FALSE for disabled
	 * @return object
	 */
	private function setApikeyActive($apikeyId = false, $active = true) {
		try {

			if (!$apikeyId)
				throw new Exception('apikey ID must be provided', 500);

			if (!$this->validateSelf())
				throw new Exception('Tenant name or Tenant ID not loaded or cached', 500);

			$toggleApikey = $this->clientHttpConnector->request('PUT',
				'/tenants/' . $this->clientTenantName . '/keys/' . $apikeyId,
				[
					'headers' => $this->clientHttpConnectorHeaders,
					'json' => ['active' => $active]
				]
			);

			return json_decode((string)$toggleApikey->getBody());

		} catch (\GuzzleHttp\Exception\ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Create a new Cloudonix domain in the assigned tenant
	 *
	 * @param string $domain The domain name to create (recommended: use a formal FQDN).
	 * @param null|object $profile An array, representing a JSON Object of meta-data properties of the domain to create. Leave as `null` for no meta-data.
	 * @param bool $active Enable or Disable the newly created domain, default to TRUE.
	 * @param null|string $application The default application to assign to the domain. Leave as `null` for the default call routing application
	 * @param null|array $aliases An array of domain aliases. Leave as `null` for no aliases creation.
	 * @return mixed
	 */
	public function createDomain($domain, $profile = null, $active = true, $application = null, $aliases = null) {
		try {

			if (!$domain)
				throw new Exception('domain must be provided', 500);

			if (!$this->validateSelf())
				throw new Exception('Tenant name or Tenant ID not loaded or cached', 500);

			$createDomainResult = $this->clientHttpConnector->request('POST',
				'/tenants/' . $this->clientTenantId . '/domains',
				[
					'headers' => $this->clientHttpConnectorHeaders,
					'json' => [
						'domain' => $domain,
						'profile' => $profile,
						'active' => $active,
						'application' => $application,
						'aliases' => $aliases
					]
				]
			);

			return json_decode((string)$createDomainResult->getBody());

		} catch (\GuzzleHttp\Exception\ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Delete a specific domain in the tenant model, based upon the domain ID.
	 *
	 * @param int $domainId The domain ID number
	 * @return object
	 */
	public function deleteDomain($domainId) {
		try {

			if (!$domainId)
				throw new Exception('domain ID must be provided', 500);

			if (!$this->validateSelf())
				throw new Exception('Tenant name or Tenant ID not loaded or cached', 500);

			$deleteDomainResult = $this->clientHttpConnector->request('DELETE',
				'/tenants/' . $this->clientTenantId . '/domains/' . $domainId,
				[
					'headers' => $this->clientHttpConnectorHeaders
				]
			);

			return json_decode((string)$deleteDomainResult->getBody());

		} catch (\GuzzleHttp\Exception\ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Get a list of all domains associated with the current tenant.
	 *
	 * @return object
	 */
	public function getDomains() {
		try {

			if (!$this->validateSelf())
				throw new Exception('Tenant name or Tenant ID not loaded or cached', 500);

			$listDomainsResult = $this->clientHttpConnector->request('GET',
				'/tenants/' . $this->clientTenantId . '/domains',
				[
					'headers' => $this->clientHttpConnectorHeaders
				]
			);

			return json_decode((string)$listDomainsResult->getBody());

		} catch (\GuzzleHttp\Exception\ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}

	/**
	 * Create a domain API key
	 *
	 * @param bool|int $domainId An integer ID of the domain ID to create the API key for. Default to false for no input.
	 * @param bool|string $name A string representing the domain API key name. Default to false for no input.
	 * @return mixed
	 */
	public function createDomainApikey($domainId = false, $name = false) {
		try {

			if (!$this->validateSelf())
				throw new Exception('Tenant name or Tenant ID not loaded or cached', 500);

			if (!$domainId)
				throw new Exception('domain ID must be provided', 500);

			if (!$name)
				throw new Exception('domain name must be provided', 500);


			$createDomainApikeyResult = $this->clientHttpConnector->request('POST',
				'/tenants/' . $this->clientTenantId . '/domains/' . $domainId . '/apikeys',
				[
					'headers' => $this->clientHttpConnectorHeaders,
					'json' => [ 'name' => $name ]
				]
			);

			return json_decode((string)$createDomainApikeyResult->getBody());

		} catch (\GuzzleHttp\Exception\ServerException $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		} catch (Exception $e) {
			die($e->getMessage() . '  code: ' . $e->getCode());
		}
	}
}
